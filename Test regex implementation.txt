Could you create some parametrized test for the follwing java code, Junit:
public class RegexValidator {

    public Boolean IsMatching(String string, Integer length) {

        String regex = "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!\"#$%&'()*+,-./:;<=>?@\\[\\]^_`{|}~])\\S{1," + length + "}$";

        Pattern pattern = Pattern.compile(regex);

        Matcher matcher = pattern.matcher(string);

        return matcher.matches();
    }
}
ChatGPT

Certainly! The IsMatching method of the RegexValidator class seems to validate that a given string:

    Contains at least one uppercase letter
    Contains at least one lowercase letter
    Contains at least one digit
    Contains at least one special character
    Does not contain any whitespace
    Has a length between 1 and length

Here's how you can write parameterized JUnit tests using JUnit 5 to test these conditions:

java

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.Collection;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.ArgumentsProvider;
import org.junit.jupiter.params.provider.ArgumentsSource;

public class RegexValidatorTest {

    public static class IsMatchingArgumentsProvider implements ArgumentsProvider {
        @Override
        public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
            return Stream.of(
                    Arguments.of("Aa1!", 4, true),
                    Arguments.of("Aa1!Bb2@", 8, true),
                    Arguments.of("Aa1!Bb2@", 7, true),
                    Arguments.of("AA1!", 4, false),
                    Arguments.of("aa1!", 4, false),
                    Arguments.of("AaA!", 4, false),
                    Arguments.of("Aa1 ", 4, false),
                    Arguments.of(" Aa1!", 5, false),
                    Arguments.of("Aa1!", 3, false)
            );
        }
    }

    @ParameterizedTest
    @ArgumentsSource(IsMatchingArgumentsProvider.class)
    public void testIsMatching(String string, Integer length, Boolean expectedResult) {
        RegexValidator validator = new RegexValidator();
        Boolean result = validator.IsMatching(string, length);
        assertEquals(expectedResult, result);
    }
}

This test uses an ArgumentsProvider to specify the test parameters. The parameters are:

    The string to validate
    The length parameter for the IsMatching method
    The expected boolean result

You can easily extend this test by adding more scenarios to the IsMatchingArgumentsProvider.